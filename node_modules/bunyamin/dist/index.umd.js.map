{"version":3,"file":"index.umd.js","sources":["../src/decorator/categories/deflateCategories.ts","../src/decorator/categories/inflateCategories.ts","../src/decorator/categories/mergeCategories.ts","../src/is-debug/createIsDebug.ts","../src/is-debug/index.ts","../src/utils/flow.ts","../src/utils/isActionable.ts","../src/utils/isError.ts","../src/utils/isPromiseLike.ts","../src/utils/isObject.ts","../src/utils/isUndefined.ts","../src/decorator/message-stack/MessageStack.ts","../src/decorator/StackTraceError.ts","../src/decorator/Bunyamin.ts","../src/noopLogger/noopLogger.ts","../src/thread-groups/ThreadGroups.ts","../src/realm.ts","../src/streams/bunyan-trace-event/threads/ThreadDispatcher.ts","../src/streams/bunyan-trace-event/threads/ThreadGroupDispatcher.ts","../src/streams/bunyan-trace-event/bunyan2trace/bunyan2trace.ts","../src/streams/bunyan-trace-event/StreamEventBuilder.ts","../src/streams/bunyan-trace-event/options/normalizeOptions.ts","../src/streams/bunyan-trace-event/BunyanTraceEventStream.ts","../src/streams/jsonl/jsonlReadFile.ts","../src/streams/jsonl/jsonlWriteFile.ts","../src/streams/trace-merge/resolvers/tree/abstract/ArrayTreeNode.ts","../src/streams/trace-merge/resolvers/tree/abstract/RangeTreeNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/FileNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/PIDNode.ts","../src/streams/trace-merge/resolvers/tree/concrete/RootNode.ts","../src/streams/trace-merge/resolvers/PIDResolver.ts","../src/streams/trace-merge/resolvers/FilePIDResolver.ts","../src/streams/trace-merge/transforms/multisort.ts","../src/streams/trace-merge/transforms/TraceAnalyze.ts","../src/streams/trace-merge/transforms/TraceMerge.ts","../src/streams/trace-merge/traceMerge.ts","../src/traceEventStream.ts","../src/uniteTraceEvents.ts","../src/wrapLogger.ts","../src/index.ts"],"sourcesContent":["export function deflateCategories(cat: unknown): string | undefined {\n  if (!cat) {\n    return undefined;\n  }\n\n  if (Array.isArray(cat)) {\n    return cat.filter(Boolean).join(',');\n  }\n\n  return String(cat);\n}\n","export function inflateCategories(cat: unknown): string[] {\n  if (!cat) {\n    return [];\n  }\n\n  if (Array.isArray(cat)) {\n    return cat;\n  }\n\n  return String(cat).split(',');\n}\n","import { inflateCategories } from './inflateCategories';\n\nexport function mergeCategories(left: string[] | undefined, right: unknown): string[] | undefined {\n  if (!left || !right) {\n    if (left) return left;\n    if (right) return inflateCategories(right);\n    return undefined;\n  }\n\n  const iright = inflateCategories(right);\n  const categories = left ? [...left, ...iright] : iright;\n  const uniqueCategories = new Set(categories);\n  return [...uniqueCategories.values()];\n}\n","export function createIsDebug(namespaces: string) {\n  const skips: RegExp[] = [];\n  const names: RegExp[] = [];\n\n  for (const part of namespaces.split(/[\\s,]+/)) {\n    if (!part) {\n      continue;\n    }\n\n    const destination = part[0] === '-' ? skips : names;\n    const pattern = part.replace(/^-/, '').replace(/\\*/g, '.*?');\n    destination.push(new RegExp(`^${pattern}$`));\n  }\n\n  return function isDebug(name: string): boolean {\n    // eslint-disable-next-line unicorn/prefer-at\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    if (skips.some((regex) => regex.test(name))) {\n      return false;\n    }\n\n    if (names.some((regex) => regex.test(name))) {\n      return true;\n    }\n\n    return false;\n  };\n}\n","import { createIsDebug } from './createIsDebug';\n\nexport const isDebug = createIsDebug(process.env.DEBUG || '');\n\nexport const isSelfDebug = () => isDebug('bunyamin');\n","export function flow<T1, T2, R>(f: (x: T1) => T2, g: (x: T2) => R): (x: T1) => R {\n  return (x: T1) => g(f(x));\n}\n","export function isActionable<T>(value: T | (() => T)): value is () => T {\n  return typeof value === 'function';\n}\n","export function isError(value: unknown): value is Error {\n  return value instanceof Error;\n}\n","export function isPromiseLike(maybePromise: unknown): maybePromise is PromiseLike<unknown> {\n  return maybePromise ? typeof (maybePromise as PromiseLike<unknown>).then === 'function' : false;\n}\n","export function isObject(value: unknown): value is object {\n  return value ? typeof value === 'object' : false;\n}\n","export function isUndefined(x: unknown): x is undefined {\n  return x === undefined;\n}\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\nimport type { ThreadID } from '../../types';\n\ntype Message = unknown[];\n\nexport type MessageStackOptions = {\n  /**\n   * A string or any other value to be used as the message when a thread\n   * is popped without any message being pushed previously.\n   * @default '<no begin message>'\n   */\n  noBeginMessage?: unknown;\n};\n\nexport class MessageStack {\n  readonly #simple = new Map<unknown, Message[]>();\n  readonly #complex = new Map<unknown, Map<unknown, Message[]>>();\n  readonly #noBeginMessage: Message;\n\n  constructor(options: MessageStackOptions = {}) {\n    this.#noBeginMessage = [options.noBeginMessage ?? '<no begin message>'];\n  }\n\n  push(tid: ThreadID | undefined, message: unknown[]): void {\n    const stack = this.#ensureStack(tid);\n    stack.push(message);\n  }\n\n  pop(tid: ThreadID | undefined): unknown[] {\n    const stack = this.#ensureStack(tid);\n    return stack.pop() ?? this.#noBeginMessage;\n  }\n\n  #ensureStack(tid: ThreadID | undefined): Message[] {\n    if (!Array.isArray(tid)) {\n      if (!this.#simple.has(tid)) {\n        this.#simple.set(tid, []);\n      }\n\n      return this.#simple.get(tid)!;\n    }\n\n    const [alias, subtid] = tid;\n    if (!this.#complex.has(alias)) {\n      this.#complex.set(alias, new Map());\n    }\n\n    const submap = this.#complex.get(alias)!;\n    if (!submap.has(subtid)) {\n      submap.set(subtid, []);\n    }\n\n    return submap.get(subtid)!;\n  }\n}\n","export class StackTraceError extends Error {\n  constructor() {\n    super('Providing stack trace below:');\n    // eslint-disable-next-line unicorn/custom-error-definition\n    this.name = 'StackTrace';\n  }\n\n  static empty() {\n    return {\n      message: '',\n      stack: '',\n    };\n  }\n}\n","import { deflateCategories, mergeCategories } from './categories';\nimport { isSelfDebug } from '../is-debug';\nimport type { ThreadGroupConfig } from '../streams';\nimport type { ThreadID } from '../types';\nimport { flow, isActionable, isError, isObject, isPromiseLike } from '../utils';\nimport type {\n  BunyaminLogMethod,\n  BunyaminConfig,\n  BunyaminLogRecordFields as UserFields,\n  BunyanLikeLogger,\n  BunyanLogLevel,\n} from './types';\nimport { MessageStack } from './message-stack';\nimport { StackTraceError } from './StackTraceError';\n\nexport class Bunyamin<Logger extends BunyanLikeLogger = BunyanLikeLogger> {\n  public readonly fatal = this.#setupLogMethod('fatal');\n  public readonly error = this.#setupLogMethod('error');\n  public readonly warn = this.#setupLogMethod('warn');\n  public readonly info = this.#setupLogMethod('info');\n  public readonly debug = this.#setupLogMethod('debug');\n  public readonly trace = this.#setupLogMethod('trace');\n\n  readonly #fields: PredefinedFields | undefined;\n  /**\n   * All instances of {@link Bunyamin} must share the same object instance\n   */\n  readonly #shared: SharedBunyaminConfig<Logger>;\n\n  constructor(config: BunyaminConfig<Logger>, fields?: never);\n  constructor(shared: unknown, fields?: unknown) {\n    if (fields === undefined) {\n      const config = shared as BunyaminConfig<Logger>;\n\n      this.#fields = undefined;\n      this.#shared = {\n        ...config,\n        loggerPriority: 0,\n        messageStack: new MessageStack({\n          noBeginMessage: config.noBeginMessage,\n        }),\n      };\n    } else {\n      this.#fields = fields as PredefinedFields;\n      this.#shared = shared as SharedBunyaminConfig<Logger>;\n    }\n  }\n\n  /** @deprecated */\n  get threadGroups(): ThreadGroupConfig[] {\n    return [];\n  }\n\n  get logger(): Logger {\n    return this.#shared.logger;\n  }\n\n  set logger(logger: Logger) {\n    this.useLogger(logger);\n  }\n\n  useLogger(logger: Logger, priority = 0): this {\n    this.#assertNotImmutable();\n    this.#assertNotChild('useLogger');\n\n    const { stack } = isSelfDebug() ? new StackTraceError() : StackTraceError.empty();\n    const currentPriority = this.#shared.loggerPriority;\n    if (priority >= currentPriority) {\n      this.#shared.loggerPriority = priority;\n      this.#shared.logger = logger;\n      stack &&\n        this.#shared.logger.trace(\n          { cat: 'bunyamin' },\n          `bunyamin logger changed (${priority} >= ${currentPriority}), caller was:\\n${stack}`,\n        );\n    } else {\n      stack &&\n        this.#shared.logger.trace(\n          { cat: 'bunyamin' },\n          `bunyamin logger not changed (${priority} < ${currentPriority}), caller was:\\n${stack}`,\n        );\n    }\n\n    return this;\n  }\n\n  useTransform(transformFields: Required<BunyaminConfig<Logger>>['transformFields']): this {\n    this.#assertNotImmutable();\n    this.#assertNotChild('useTransform');\n\n    this.#shared.transformFields = this.#shared.transformFields\n      ? flow(this.#shared.transformFields, transformFields)\n      : transformFields;\n\n    return this;\n  }\n\n  child(overrides?: UserFields): Bunyamin<Logger> {\n    const childContext = this.#mergeFields(this.#fields, this.#transformContext(overrides));\n    return new Bunyamin(this.#shared, childContext as never);\n  }\n\n  #setupLogMethod(level: BunyanLogLevel): BunyaminLogMethod {\n    const logMethod = this.#instant.bind(this, level);\n\n    return Object.assign(logMethod, {\n      begin: this.#begin.bind(this, level),\n      complete: this.#complete.bind(this, level),\n      end: this.#end.bind(this, level),\n    }) as BunyaminLogMethod;\n  }\n\n  #begin(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry('B', arguments_);\n    this.#beginInternal(level, entry.fields, entry.message);\n  }\n\n  #beginInternal(level: BunyanLogLevel, fields: ResolvedFields, message: unknown[]): void {\n    this.#shared.messageStack.push(fields.tid, message);\n    this.#shared.logger[level](fields, ...message);\n  }\n\n  #end(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry('E', arguments_);\n    this.#endInternal(level, entry.fields, entry.message);\n  }\n\n  #endInternal(level: BunyanLogLevel, fields: ResolvedFields, customMessage: unknown[]): void {\n    const beginMessage = this.#shared.messageStack.pop(fields.tid);\n    const message = customMessage.length > 0 ? customMessage : beginMessage;\n\n    this.#shared.logger[level](fields, ...(message as unknown[]));\n  }\n\n  #instant(level: BunyanLogLevel, ...arguments_: unknown[]): void {\n    const entry = this.#resolveLogEntry(void 0, arguments_);\n    this.#shared.logger[level](entry.fields, ...entry.message);\n  }\n\n  #complete<T>(\n    level: BunyanLogLevel,\n    maybeContext: unknown,\n    maybeMessage: unknown,\n    maybeAction: T | (() => T),\n  ): T {\n    const action = typeof maybeContext === 'string' ? (maybeMessage as T | (() => T)) : maybeAction;\n    const arguments_ = maybeAction === action ? [maybeContext, maybeMessage] : [maybeContext];\n    const { fields, message } = this.#resolveLogEntry('B', arguments_);\n\n    return this.#completeInternal(level, fields, message, action);\n  }\n\n  #completeInternal<T>(\n    level: BunyanLogLevel,\n    fields: ResolvedFields,\n    message: unknown[],\n    action: T | (() => T),\n  ): T {\n    const end = (customContext: EndContext) => {\n      const endContext = {\n        ...customContext,\n        ph: 'E',\n        tid: fields.tid,\n      } as ResolvedFields;\n\n      this.#endInternal(level, endContext, []);\n    };\n\n    let result;\n    this.#beginInternal(level, fields, message);\n    try {\n      result = isActionable(action) ? action() : action;\n\n      if (isPromiseLike(result)) {\n        result.then(\n          () => end({ success: true }),\n          (error) => end({ success: false, err: error }),\n        );\n      } else {\n        end({ success: true });\n      }\n\n      return result;\n    } catch (error: unknown) {\n      end({ success: false, err: error });\n      throw error;\n    }\n  }\n\n  #resolveLogEntry(phase: MaybePhase, arguments_: unknown[]) {\n    const userContext = isObject(arguments_[0]) ? (arguments_[0] as MaybeUserFields) : undefined;\n    const fields = this.#mergeFields(this.#fields, this.#transformContext(userContext));\n    const message: unknown[] =\n      userContext === undefined\n        ? arguments_\n        : isError(arguments_[0]) && arguments_.length === 1\n        ? [arguments_[0].message]\n        : arguments_.slice(1);\n\n    return {\n      fields: this.#resolveFields(fields, phase),\n      message,\n    };\n  }\n\n  #mergeFields(\n    left: PredefinedFields | undefined,\n    right: UserFields | undefined,\n  ): PredefinedFields {\n    const result = {\n      ...left,\n      ...right,\n    };\n\n    const cat = mergeCategories(left?.cat, right?.cat);\n    if (result.cat !== cat) {\n      result.cat = cat;\n    }\n\n    return result as PredefinedFields;\n  }\n\n  #transformContext(maybeError: UserFields | Error | undefined): UserFields | undefined {\n    const fields: UserFields | undefined = isError(maybeError) ? { err: maybeError } : maybeError;\n    return this.#shared.transformFields ? this.#shared.transformFields(fields) : fields;\n  }\n\n  #resolveFields(fields: PredefinedFields, ph: MaybePhase): ResolvedFields {\n    const result: ResolvedFields = fields as ResolvedFields;\n    if (ph !== undefined) {\n      result.ph = ph as never;\n    }\n    if (result.cat !== undefined) {\n      result.cat = deflateCategories(result.cat);\n    }\n    return result;\n  }\n\n  #assertNotChild(methodName: string): void {\n    if (this.#fields) {\n      throw new Error(`Method Bunyamin#${methodName} is not available for child instances`);\n    }\n  }\n\n  #assertNotImmutable(): void {\n    if (this.#shared.immutable) {\n      throw new Error('Cannot change a logger of an immutable instance');\n    }\n  }\n}\n\ntype EndContext = {\n  success?: boolean;\n  err?: unknown;\n};\n\ntype MaybePhase = 'B' | 'E' | undefined;\n\ntype MaybeUserFields = UserFields | Error;\n\ntype PredefinedFields = UserFields & {\n  cat?: string[];\n};\n\ntype ResolvedFields = UserFields & {\n  cat?: string;\n  ph?: 'B' | 'E';\n  tid?: ThreadID;\n};\n\ntype SharedBunyaminConfig<Logger extends BunyanLikeLogger> = BunyaminConfig<Logger> & {\n  loggerPriority: number;\n  messageStack: MessageStack;\n};\n","import type { BunyanLikeLogger } from '../decorator';\n\nconst noop: any = () => {\n  /* no-op */\n};\n\nexport class NoopLogger implements BunyanLikeLogger {\n  fatal = noop;\n  error = noop;\n  warn = noop;\n  info = noop;\n  debug = noop;\n  trace = noop;\n}\n\nexport function noopLogger(_options?: any) {\n  return new NoopLogger();\n}\n","import type { Bunyamin } from '../decorator';\nimport type { ThreadGroupConfig } from '../streams';\nimport { isSelfDebug } from '../is-debug';\nimport { StackTraceError } from '../decorator/StackTraceError';\n\nexport class ThreadGroups {\n  readonly #bunyamin: Bunyamin;\n  readonly #debugMode = isSelfDebug();\n  readonly #groups = new Map<string, ThreadGroupConfig>();\n\n  constructor(bunyamin: Bunyamin) {\n    this.#bunyamin = bunyamin;\n    this.#groups = new Map();\n  }\n\n  add(group: ThreadGroupConfig) {\n    if (this.#debugMode) {\n      if (this.#groups.has(group.id)) {\n        this.#logAddition(group, 'overwritten');\n      } else {\n        this.#logAddition(group, 'added');\n      }\n    }\n\n    this.#groups.set(group.id, group);\n    return this;\n  }\n\n  [Symbol.iterator]() {\n    return this.#groups.values();\n  }\n\n  #logAddition(group: ThreadGroupConfig, action: string) {\n    const { stack } = new StackTraceError();\n    this.#bunyamin.trace(\n      { cat: 'bunyamin' },\n      `thread group ${action}: ${group.id} (${group.displayName})\\n\\n${stack}`,\n    );\n  }\n}\n","import { Bunyamin } from './decorator';\nimport { noopLogger } from './noopLogger';\nimport { isSelfDebug } from './is-debug';\nimport { ThreadGroups } from './thread-groups';\n\ntype Realm = {\n  bunyamin: Bunyamin;\n  nobunyamin: Bunyamin;\n  threadGroups: ThreadGroups;\n};\n\nfunction create() {\n  const selfDebug = isSelfDebug();\n  const bunyamin = new Bunyamin({ logger: noopLogger() });\n  const nobunyamin = new Bunyamin({\n    logger: noopLogger(),\n    immutable: true,\n  });\n  const threadGroups = new ThreadGroups(bunyamin);\n\n  if (selfDebug) {\n    bunyamin.trace({ cat: 'bunyamin' }, 'bunyamin global instance created');\n  }\n\n  return { bunyamin, nobunyamin, threadGroups };\n}\n\nfunction getCached(): Realm | undefined {\n  const result = (globalThis as any).__BUNYAMIN__;\n\n  if (isSelfDebug() && result) {\n    result.bunyamin.trace({ cat: 'bunyamin' }, 'bunyamin global instance retrieved from cache');\n  }\n\n  return result;\n}\n\nfunction setCached(realm: Realm) {\n  (globalThis as any).__BUNYAMIN__ = realm;\n  return realm;\n}\n\nexport default setCached(getCached() ?? create());\n","import { isUndefined } from '../../../utils';\n\nconst NIL = Symbol('NIL');\n\nexport class ThreadDispatcher {\n  readonly #stacks: number[] = [];\n  readonly #threads: unknown[] = [];\n  readonly #countMax: number;\n\n  constructor(\n    public readonly name: string,\n    public readonly strict: boolean,\n    public readonly min: number,\n    public readonly max: number,\n  ) {\n    this.#countMax = max - min + 1;\n  }\n\n  begin(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    this.#threads[tid] = id;\n    this.#stacks[tid] = (this.#stacks[tid] || 0) + 1;\n\n    return this.#transposeTID(tid);\n  }\n\n  resolve(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    return this.#transposeTID(tid);\n  }\n\n  end(id: unknown = NIL): number | Error {\n    const tid = this.#findTID(id);\n    if (tid === -1) {\n      return this.#error();\n    }\n\n    if (this.#stacks[tid] && --this.#stacks[tid] === 0) {\n      delete this.#threads[tid];\n    }\n\n    return this.#transposeTID(tid);\n  }\n\n  #findTID(id: unknown): number {\n    let tid = this.#threads.indexOf(id);\n    if (tid === -1) {\n      // Try to find a recently released slot in the array:\n      tid = this.#threads.findIndex(isUndefined);\n    }\n\n    if (tid === -1) {\n      tid = this.#threads.length;\n    }\n\n    return tid < this.#countMax ? tid : -1;\n  }\n\n  #transposeTID(tid: number): number {\n    return this.min + tid;\n  }\n\n  #error(): number | Error {\n    const count = this.#countMax;\n    const threads = count > 1 ? `threads` : `thread`;\n\n    return this.strict\n      ? new Error(`Exceeded limit of ${count} concurrent ${threads} in group \"${this.name}\"`)\n      : this.max;\n  }\n}\n","import IntervalTree from '@flatten-js/interval-tree';\n\nimport type { ThreadAlias, ThreadID } from '../../../types';\nimport { ThreadDispatcher } from './ThreadDispatcher';\nimport type { ThreadGroupConfig } from './ThreadGroupConfig';\n\nexport type ThreadGroupDispatcherConfig = {\n  defaultThreadName: string;\n  maxConcurrency: number;\n  strict: boolean;\n};\n\nexport class ThreadGroupDispatcher {\n  readonly #strict: boolean;\n  readonly #dispatchers: Record<string, ThreadDispatcher> = {};\n  readonly #maxConcurrency: number;\n  readonly #defaultThreadName: string;\n  readonly #names: IntervalTree = new IntervalTree();\n\n  #freeThreadId = 1;\n\n  constructor(options: ThreadGroupDispatcherConfig) {\n    this.#defaultThreadName = options.defaultThreadName;\n    this.#maxConcurrency = options.maxConcurrency;\n    this.#strict = options.strict;\n  }\n\n  registerThreadGroup(config: ThreadGroupConfig): this {\n    const maxConcurrency = config.maxConcurrency ?? this.#maxConcurrency;\n    const min = this.#freeThreadId;\n    const max = min + maxConcurrency - 1;\n\n    this.#dispatchers[config.id] = new ThreadDispatcher(config.displayName, this.#strict, min, max);\n    this.#names.insert([min, max], config.displayName);\n    this.#freeThreadId = max + 1;\n\n    return this;\n  }\n\n  name(tid: number): string | undefined {\n    if (tid === 0) {\n      return this.#defaultThreadName;\n    }\n\n    return this.#names.search([tid, tid])[0];\n  }\n\n  resolve(ph: string | undefined, tid: ThreadID | undefined): number | Error {\n    if (tid == null) {\n      return 0;\n    }\n\n    if (typeof tid === 'number') {\n      return tid;\n    }\n\n    const dispatcher = this.#resolveDispatcher(tid as ThreadAlias);\n    if (!dispatcher) {\n      return new Error(`Unknown thread group \"${this.#resolveAlias(tid)}\"`);\n    }\n\n    const id = this.#resolveId(tid);\n\n    switch (ph) {\n      case 'B': {\n        return dispatcher.begin(id);\n      }\n      case 'E': {\n        return dispatcher.end(id);\n      }\n      default: {\n        return dispatcher.resolve(id);\n      }\n    }\n  }\n\n  #resolveDispatcher(threadAlias: ThreadAlias): ThreadDispatcher {\n    const groupName = typeof threadAlias === 'string' ? threadAlias : threadAlias[0];\n    return this.#ensureGroupDispatcher(groupName);\n  }\n\n  #resolveAlias(threadAlias: ThreadAlias | undefined): unknown {\n    return Array.isArray(threadAlias) ? threadAlias[0] : threadAlias;\n  }\n\n  #resolveId(threadAlias: ThreadAlias | undefined): unknown {\n    return threadAlias === undefined || typeof threadAlias === 'string'\n      ? undefined\n      : threadAlias[1];\n  }\n\n  #ensureGroupDispatcher(threadGroup: string): ThreadDispatcher {\n    if (!this.#dispatchers[threadGroup] && !this.#strict) {\n      this.registerThreadGroup({ id: threadGroup, displayName: threadGroup });\n    }\n\n    return this.#dispatchers[threadGroup];\n  }\n}\n","/* eslint-disable unicorn/switch-case-braces,unicorn/prevent-abbreviations,@typescript-eslint/no-explicit-any*/\nimport type {\n  AsyncEvent,\n  CompleteEvent,\n  CounterEvent,\n  DurationBeginEvent,\n  DurationEndEvent,\n  Event,\n  EventWithStack,\n  InstantEvent,\n  MetadataEvent,\n} from 'trace-event-lib';\n\n// TODO: optimize args - they will be often empty objects\n\nexport function bunyan2trace(record: any): Event {\n  if (!record.ph) {\n    return buildFallbackEvent(record);\n  }\n\n  switch (record.ph) {\n    case 'B':\n      return buildDurationBeginEvent(record);\n    case 'E':\n      return buildDurationEndEvent(record);\n    case 'i':\n      return buildInstantEvent(record);\n    case 'b':\n    case 'e':\n    case 'n':\n      return buildAsyncEvent(record);\n    case 'X':\n      return buildCompleteEvent(record);\n    case 'C':\n      return buildCounterEvent(record);\n    case 'M':\n      return buildMetadataEvent(record);\n    default:\n      return buildFallbackEvent(record);\n  }\n}\n\nfunction buildAsyncEvent(record: any): AsyncEvent {\n  const event = bunyan2trace(record) as AsyncEvent;\n  return moveProperties(event.args!, event, ['id', 'id2', 'scope']);\n}\n\nfunction buildCompleteEvent(record: any): CompleteEvent {\n  const event = extractEventWithStack(record) as CompleteEvent;\n  return moveProperties(event.args!, event, ['dur', 'tdur', 'esf', 'estack']);\n}\n\nfunction buildCounterEvent(record: any): CounterEvent {\n  const event = bunyan2trace(record) as CounterEvent;\n  delete event.cat;\n  return moveProperties(event.args!, event, ['id']);\n}\n\nfunction buildDurationBeginEvent(record: any): DurationBeginEvent {\n  return extractEventWithStack(record) as DurationBeginEvent;\n}\n\nfunction buildDurationEndEvent(record: any): DurationEndEvent {\n  const event = extractEventWithStack(record) as DurationEndEvent;\n  delete event.name;\n  delete event.cat;\n  return event;\n}\n\nfunction buildMetadataEvent(record: any): MetadataEvent {\n  const event = bunyan2trace(record) as MetadataEvent;\n  delete event.cat;\n  return event;\n}\n\nfunction buildInstantEvent(record: any): InstantEvent {\n  const event = extractEventWithStack(record) as InstantEvent;\n  const args = moveProperties(event.args!, event, ['s']);\n  if (args.s === 'g' || args.s === 'p') {\n    delete event.sf;\n    delete event.stack;\n  }\n\n  return event;\n}\n\nfunction buildFallbackEvent(record: any): InstantEvent {\n  const event = buildInstantEvent(record);\n  event.ph = 'i';\n  return event;\n}\n\nfunction extractTraceEvent(record: any): Event {\n  const {\n    cat,\n    cname,\n    ph,\n    tts,\n    pid,\n    tid,\n    time,\n    msg: name,\n    name: _processName,\n    hostname: _hostname,\n    ...args\n  } = record;\n\n  const ts = new Date(time).getTime() * 1e3;\n\n  return {\n    cat,\n    cname,\n    ph,\n    ts,\n    tts,\n    pid,\n    tid,\n    name,\n    args,\n  } as Event;\n}\n\nfunction extractEventWithStack(record: any): EventWithStack {\n  const event = extractTraceEvent(record) as EventWithStack;\n  return moveProperties(event.args!, event, ['sf', 'stack']);\n}\n\nfunction moveProperties<T extends Record<string, any>>(\n  source: Record<string, any>,\n  target: T,\n  keys: (keyof T)[],\n): T {\n  for (const key of keys) {\n    if (source[key as string] !== undefined) {\n      target[key] = source[key as string];\n      delete source[key as string];\n    }\n  }\n\n  return target;\n}\n","import type { Event } from 'trace-event-lib';\nimport * as TEL from 'trace-event-lib';\nimport type { Transform } from 'node:stream';\n\nexport class StreamEventBuilder extends TEL.AbstractEventBuilder {\n  constructor(protected readonly stream: Transform) {\n    super();\n  }\n\n  public send(event: Event) {\n    this.stream.push(event);\n  }\n}\n","import type { TraceEventStreamOptions } from './TraceEventStreamOptions';\nimport type { ThreadGroupConfig } from '../threads';\n\nexport function normalizeOptions(\n  options: TraceEventStreamOptions,\n): Required<TraceEventStreamOptions> {\n  options.ignoreFields = options.ignoreFields ?? ['v', 'hostname', 'level', 'name'];\n  options.defaultThreadName = options.defaultThreadName ?? 'Main Thread';\n  options.maxConcurrency = options.maxConcurrency ?? 100;\n  options.strict = options.strict ?? false;\n  options.threadGroups = [...(options.threadGroups ?? [])].map((threadGroup, index) =>\n    typeof threadGroup === 'string'\n      ? {\n          id: threadGroup,\n          displayName: threadGroup,\n        }\n      : validateThreadGroup(threadGroup, index),\n  );\n\n  if (options.maxConcurrency < 1) {\n    throw new Error(`maxConcurrency must be at least 1, got ${options.maxConcurrency}`);\n  }\n\n  return options as Required<TraceEventStreamOptions>;\n}\n\nfunction validateThreadGroup(threadGroup: ThreadGroupConfig, index: number) {\n  if (!threadGroup.id) {\n    throw new Error('Missing thread group ID in thread group at index ' + index);\n  }\n\n  if (threadGroup.maxConcurrency != null) {\n    if (threadGroup.maxConcurrency < 1) {\n      throw new Error(\n        `Max concurrency (${threadGroup.id} -> ${threadGroup.maxConcurrency}) has to be a positive integer`,\n      );\n    }\n\n    if (threadGroup.maxConcurrency > 1e6) {\n      throw new Error(\n        `Max concurrency (${threadGroup.id} -> ${threadGroup.maxConcurrency}) cannot be greater than 1,000,000`,\n      );\n    }\n  }\n\n  return threadGroup;\n}\n","import { Transform } from 'node:stream';\n\nimport { isError } from '../../utils';\n\nimport { ThreadGroupDispatcher } from './threads';\nimport type { ThreadGroupConfig } from './threads';\nimport { bunyan2trace } from './bunyan2trace';\nimport { StreamEventBuilder } from './StreamEventBuilder';\nimport type { TraceEventStreamOptions } from './options/TraceEventStreamOptions';\nimport { normalizeOptions } from './options/normalizeOptions';\n\n// TODO: add tests\nexport class BunyanTraceEventStream extends Transform {\n  readonly #knownTids = new Set<number>();\n  readonly #threadGroupDispatcher: ThreadGroupDispatcher;\n  readonly #builder = new StreamEventBuilder(this);\n  readonly #ignoreFields: string[];\n\n  #started = false;\n\n  constructor(userOptions: TraceEventStreamOptions = {}) {\n    super({ objectMode: true });\n\n    const options = normalizeOptions(userOptions);\n    this.#ignoreFields = options.ignoreFields;\n    this.#threadGroupDispatcher = new ThreadGroupDispatcher({\n      strict: options.strict ?? false,\n      defaultThreadName: options.defaultThreadName ?? 'Main Thread',\n      maxConcurrency: options.maxConcurrency ?? 100,\n    });\n\n    for (const threadGroup of options.threadGroups) {\n      this.#threadGroupDispatcher.registerThreadGroup(threadGroup as ThreadGroupConfig);\n    }\n  }\n\n  _transform(\n    record: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    const json = typeof record === 'string' ? JSON.parse(record) : record;\n    const event = json && bunyan2trace(json);\n\n    if (event.args) {\n      for (const field of this.#ignoreFields) {\n        delete event.args[field];\n      }\n    }\n\n    if (!this.#started) {\n      this.#started = true;\n      this.#builder.metadata({\n        pid: event.pid,\n        ts: event.ts,\n        name: 'process_name',\n        args: { name: json.name },\n      });\n    }\n\n    const tid = (event.tid = this.#threadGroupDispatcher.resolve(event.ph, event.tid));\n    if (isError(tid)) {\n      callback(tid);\n      return;\n    }\n\n    if (!this.#knownTids.has(tid)) {\n      this.#knownTids.add(tid);\n\n      const threadName = this.#threadGroupDispatcher.name(tid);\n      if (threadName) {\n        this.#builder.metadata({\n          pid: event.pid,\n          tid: event.tid,\n          ts: event.ts,\n          name: 'thread_name',\n          args: { name: threadName },\n        });\n      }\n    }\n\n    this.#builder.send(event);\n    callback(null);\n  }\n}\n","import fs from 'node:fs';\nimport type { Readable } from 'node:stream';\nimport { Transform } from 'node:stream';\n// eslint-disable-next-line import/extensions\nimport StreamArray from 'stream-json/streamers/StreamArray.js';\n\nexport function jsonlReadFile(filePath: string): Readable {\n  return fs\n    .createReadStream(filePath, { encoding: 'utf8' })\n    .pipe(StreamArray.withParser())\n    .pipe(new MapValues(filePath));\n}\n\nclass MapValues extends Transform {\n  constructor(protected readonly filePath: string) {\n    super({ objectMode: true });\n  }\n\n  _transform(\n    record: any,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    this.push({\n      ...record,\n      filePath: this.filePath,\n    } as JSONLEntry);\n\n    callback();\n  }\n}\n\nexport type JSONLEntry<T = unknown> = {\n  filePath: string;\n  key: number;\n  value: T;\n};\n","import fs from 'node:fs';\nimport { Writable } from 'node:stream';\n\nexport function jsonlWriteFile(filePath: string): Writable {\n  return new JSONLFileStream({ filePath });\n}\n\ntype JSONLFileStreamOptions = {\n  filePath: string;\n};\n\ntype ErrorCallback = (error?: Error | null) => void;\n\n// Custom writable stream to append JSON objects\nclass JSONLFileStream extends Writable {\n  private readonly _filePath: string;\n  private _fileDescriptor = Number.NaN;\n  private _offset = Number.NaN;\n  private _counter = 0;\n\n  constructor(options: JSONLFileStreamOptions) {\n    super({ objectMode: true });\n\n    this._filePath = options.filePath;\n  }\n\n  _construct(callback: ErrorCallback) {\n    this._offset = 0;\n    this._fileDescriptor = fs.openSync(this._filePath, 'wx');\n\n    const content = Buffer.from('[]\\n');\n    fs.write(this._fileDescriptor, content, this._offset, content.length, (error) => {\n      if (error) {\n        callback(error);\n      } else {\n        this._offset += 1;\n        callback();\n      }\n    });\n  }\n\n  _write(chunk: unknown, _: unknown, callback: ErrorCallback) {\n    const content =\n      this._counter++ > 0 ? `,\\n${JSON.stringify(chunk)}]\\n` : `${JSON.stringify(chunk)}]\\n`;\n    const buffer = Buffer.from(content);\n\n    fs.write(\n      this._fileDescriptor,\n      buffer,\n      0,\n      buffer.length,\n      this._offset,\n      (error: Error | null, bytesWritten: number) => {\n        if (error) {\n          callback(error);\n        } else {\n          this._offset += bytesWritten - 2;\n          callback();\n        }\n      },\n    );\n  }\n\n  _final(callback: ErrorCallback) {\n    fs.close(this._fileDescriptor, callback);\n  }\n}\n","import type { LeafNode, TreeNode } from './TreeNode';\n\nexport class ArrayTreeNode<Value = unknown, ChildNode extends LeafNode<any> = LeafNode>\n  implements TreeNode<Value, ChildNode>\n{\n  index = -1;\n  parent?: TreeNode<any, this>;\n\n  readonly #children: ChildNode[] = [];\n  readonly #map = new Map<unknown, ChildNode>();\n\n  constructor(public value: Value) {}\n\n  get size() {\n    return this.#children.length;\n  }\n\n  [Symbol.iterator]() {\n    return this.#children[Symbol.iterator]();\n  }\n\n  findByValue(value: unknown): ChildNode | undefined {\n    return this.#map.get(value);\n  }\n\n  appendChild(node: ChildNode): ChildNode {\n    node.index = this.size;\n    node.parent = this as TreeNode;\n    this.#children.push(node);\n    this.#map.set(node.value, node);\n    return node;\n  }\n}\n","import type { LeafNode, TreeNode } from './TreeNode';\n\nexport class RangeTreeNode<Value> implements LeafNode<Value> {\n  index = -1;\n  parent?: TreeNode<any, this>;\n\n  #min = Number.POSITIVE_INFINITY;\n  #max = Number.NEGATIVE_INFINITY;\n\n  constructor(public value: Value) {}\n\n  get min() {\n    return this.#min;\n  }\n\n  get max() {\n    return this.#max;\n  }\n\n  get size() {\n    return this.#max - this.#min + 1;\n  }\n\n  protected add(child: number) {\n    if (child < this.#min) {\n      this.#min = child;\n    }\n    if (child > this.#max) {\n      this.#max = child;\n    }\n  }\n}\n","import { RangeTreeNode } from '../abstract';\n\nexport class FileNode extends RangeTreeNode<string> {\n  rank?: number;\n  offset?: number;\n\n  addTID(tid: number): void {\n    return super.add(tid);\n  }\n\n  transpose(tid: number): number {\n    if (tid < this.min || tid > this.max) {\n      throw new Error(`Value ${tid} not found in range: [${this.min}, ${this.max}]`);\n    }\n\n    return (this.offset ?? 0) + (tid - this.min);\n  }\n}\n","import { ArrayTreeNode } from '../abstract';\nimport { FileNode } from './FileNode';\n\nexport class PIDNode extends ArrayTreeNode<number, FileNode> {\n  addFile(file: string): FileNode {\n    /* eslint-disable-next-line unicorn/prefer-dom-node-append */\n    return this.findByValue(file) ?? this.appendChild(new FileNode(file));\n  }\n}\n","import { ArrayTreeNode } from '../abstract';\nimport { PIDNode } from './PIDNode';\n\nexport class RootNode extends ArrayTreeNode<never, PIDNode> {\n  constructor() {\n    super(undefined as never);\n  }\n\n  addPID(pid: number): PIDNode {\n    /* eslint-disable-next-line unicorn/prefer-dom-node-append */\n    return this.findByValue(pid) ?? this.appendChild(new PIDNode(pid));\n  }\n\n  rank() {\n    let index = 0;\n    let offset = 0;\n\n    for (const pid of this) {\n      for (const file of pid) {\n        file.rank = index++;\n        file.offset = offset;\n        offset += file.size;\n      }\n    }\n  }\n}\n","import { RootNode } from './tree';\nimport type { Resolver } from './Resolver';\n\nexport class PIDResolver implements Resolver {\n  protected tree = new RootNode();\n\n  add(pid: number, _filePath: string, tid: number) {\n    this.tree.addPID(pid).addFile('').addTID(tid);\n  }\n\n  finalize() {\n    this.tree.rank();\n  }\n\n  resolvePid(_filePath: string, pid: number): number {\n    return pid;\n  }\n\n  resolveTid(_filePath: string, pid: number, tid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue('');\n    return $file?.transpose(tid) ?? Number.NaN;\n  }\n}\n","import { PIDResolver } from './PIDResolver';\n\nexport class FilePIDResolver extends PIDResolver {\n  add(pid: number, filePath: string, tid: number) {\n    this.tree.addPID(pid).addFile(filePath).addTID(tid);\n  }\n\n  resolvePid(filePath: string, pid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue(filePath);\n    return ($file?.rank ?? Number.NaN) + 1;\n  }\n\n  resolveTid(filePath: string, pid: number, tid: number): number {\n    const $pid = this.tree.findByValue(pid);\n    const $file = $pid?.findByValue(filePath);\n    return $file?.transpose(tid) ?? Number.NaN;\n  }\n}\n","import type { Readable } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\nimport multiSortStream from 'multi-sort-stream';\n\nimport type { JSONLEntry } from '../../jsonl';\n\nexport function multisort(streams: Readable[]): Readable {\n  return multiSortStream(streams, comparator);\n}\n\nfunction comparator(a: unknown, b: unknown): number {\n  const { value: aa } = a as JSONLEntry<TraceEvent>;\n  const { value: bb } = b as JSONLEntry<TraceEvent>;\n\n  return aa.ts < bb.ts ? -1 : aa.ts > bb.ts ? 1 : 0;\n}\n","import { Writable } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\nimport type { Resolver } from '../resolvers';\nimport type { JSONLEntry } from '../../jsonl';\n\nexport class TraceAnalyze extends Writable {\n  readonly #resolver: Resolver;\n\n  constructor(resolver: Resolver) {\n    super({\n      objectMode: true,\n      highWaterMark: Number.MAX_SAFE_INTEGER,\n    });\n\n    this.#resolver = resolver;\n  }\n\n  _write(\n    chunk: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    const entry = chunk as JSONLEntry<TraceEvent>;\n    this.#resolver.add(entry.value.pid, entry.filePath, entry.value.tid);\n    callback();\n  }\n\n  _final(callback: (error?: Error | null) => void) {\n    this.#resolver.finalize();\n    callback();\n  }\n}\n","import { Transform } from 'node:stream';\nimport type { TraceEvent } from 'trace-event-lib';\n\nimport type { Resolver } from '../resolvers';\nimport type { JSONLEntry } from '../../jsonl';\n\nexport class TraceMerge extends Transform {\n  readonly #resolverPromise: Promise<Resolver>;\n  #resolver?: Resolver;\n\n  constructor(resolverPromise: Promise<Resolver>) {\n    super({\n      objectMode: true,\n      highWaterMark: Number.MAX_SAFE_INTEGER,\n    });\n\n    this.#resolverPromise = resolverPromise;\n  }\n\n  _transform(\n    chunk: unknown,\n    _encoding: string,\n    callback: (error?: Error | null, data?: unknown) => void,\n  ) {\n    if (this.#resolver) {\n      const entry = chunk as JSONLEntry<TraceEvent>;\n      const output = { ...entry.value };\n      if (output.pid != null) {\n        output.pid = this.#resolver.resolvePid(entry.filePath, entry.value.pid);\n      }\n      if (output.tid != null) {\n        output.tid = this.#resolver.resolveTid(entry.filePath, entry.value.pid, entry.value.tid);\n      }\n      this.push(output);\n      callback();\n    } else {\n      this.#resolverPromise.then(\n        (resolver) => {\n          this.#resolver = resolver;\n          this._transform(chunk, _encoding, callback);\n        },\n        (error) => {\n          callback(error);\n        },\n      );\n    }\n  }\n}\n","import type { Readable } from 'node:stream';\n\nimport { jsonlReadFile } from '../jsonl';\nimport type { Resolver } from './resolvers';\nimport { FilePIDResolver, PIDResolver } from './resolvers';\nimport { multisort, TraceAnalyze, TraceMerge } from './transforms';\n\nexport type TraceMergeOptions = {\n  mode: 'pid' | 'fpid';\n};\n\nexport function traceMerge(filePaths: string[], options?: TraceMergeOptions): Readable {\n  const streams = filePaths.map((filePath) => jsonlReadFile(filePath));\n  const resolver = makeResolver(options);\n  const $resolver = makeDeferred<Resolver>();\n  const analyze = new TraceAnalyze(resolver)\n    .on('error', (error) => $resolver.reject(error))\n    .on('finish', () => $resolver.resolve(resolver));\n\n  const merge = new TraceMerge($resolver.promise);\n\n  const sorted = multisort(streams);\n  sorted.pipe(analyze);\n  return sorted.pipe(merge);\n}\n\nfunction makeResolver(options?: TraceMergeOptions): Resolver {\n  return options?.mode === 'fpid' ? new FilePIDResolver() : new PIDResolver();\n}\n\nfunction makeDeferred<T>() {\n  let resolve: (value: T) => void;\n  let reject: (reason?: unknown) => void;\n  const promise = new Promise<T>((_resolve, _reject) => {\n    resolve = _resolve;\n    reject = _reject;\n  });\n\n  return {\n    promise: promise,\n    resolve: resolve!,\n    reject: reject!,\n  };\n}\n","import type { Transform } from 'node:stream';\nimport { BunyanTraceEventStream, jsonlWriteFile } from './streams';\nimport type { TraceEventStreamOptions } from './streams';\n\nexport function traceEventStream(\n  options: TraceEventStreamOptions & { filePath: string },\n): Transform {\n  const jsonl = jsonlWriteFile(options.filePath);\n  const stream = new BunyanTraceEventStream(options);\n  stream.pipe(jsonl);\n  return stream;\n}\n","import type { Readable } from 'node:stream';\nimport type { TraceMergeOptions } from './streams';\nimport { jsonlWriteFile, traceMerge } from './streams';\n\nexport function uniteTraceEvents(sourcePaths: string[], options?: TraceMergeOptions): Readable {\n  return traceMerge(sourcePaths, options);\n}\n\nexport async function uniteTraceEventsToFile(\n  sourcePaths: string[],\n  destinationPath: string,\n  options?: TraceMergeOptions,\n) {\n  return new Promise((resolve, reject) => {\n    uniteTraceEvents(sourcePaths, options)\n      .pipe(jsonlWriteFile(destinationPath))\n      .on('finish', resolve)\n      .on('error', reject);\n  });\n}\n","import type { BunyaminConfig, BunyanLikeLogger } from './decorator';\nimport { Bunyamin } from './decorator';\n\nexport * from './decorator/types';\nexport type { Bunyamin } from './decorator';\n\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  options: BunyaminConfig<Logger>,\n): Bunyamin<Logger>;\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  logger: Logger,\n  options?: Omit<BunyaminConfig<Logger>, 'logger'>,\n): Bunyamin<Logger>;\nexport function wrapLogger<Logger extends BunyanLikeLogger>(\n  maybeLogger: any,\n  maybeConfig?: unknown,\n): Bunyamin<Logger> {\n  const logger = (maybeLogger.logger ?? maybeLogger) as Logger;\n  const config = (logger === maybeLogger ? maybeConfig : maybeLogger) as\n    | BunyaminConfig<Logger>\n    | undefined;\n\n  return new Bunyamin({\n    ...config,\n    logger,\n  });\n}\n","import realm from './realm';\n\nexport * from './noopLogger';\nexport * from './traceEventStream';\nexport * from './uniteTraceEvents';\nexport * from './wrapLogger';\nexport { isDebug } from './is-debug';\n\nexport const bunyamin = realm.bunyamin;\nexport const nobunyamin = realm.nobunyamin;\nexport const threadGroups = realm.threadGroups;\n\nexport default bunyamin;\n"],"names":["deflateCategories","cat","undefined","Array","isArray","filter","Boolean","join","String","inflateCategories","split","mergeCategories","left","right","iright","categories","uniqueCategories","Set","values","createIsDebug","namespaces","skips","names","part","destination","pattern","replace","push","RegExp","isDebug","name","length","some","regex","test","process","env","DEBUG","isSelfDebug","flow","f","g","x","isActionable","value","isError","Error","isPromiseLike","maybePromise","then","isObject","isUndefined","MessageStack","constructor","options","_options$noBeginMessa","Object","defineProperty","_ensureStack","_ensureStack2","_simple","writable","Map","_complex","_noBeginMessage","_classPrivateFieldLooseBase","noBeginMessage","tid","message","stack","pop","_stack$pop","has","set","get","alias","subtid","submap","StackTraceError","empty","_fields","_classPrivateFieldLooseKey","_shared","_setupLogMethod","_begin","_beginInternal","_end","_endInternal","_instant","_complete","_completeInternal","_resolveLogEntry","_mergeFields","_transformContext","_resolveFields","_assertNotChild","_assertNotImmutable","Bunyamin","shared","fields","_assertNotImmutable2","_assertNotChild2","_resolveFields2","_transformContext2","_mergeFields2","_resolveLogEntry2","_completeInternal2","_complete2","_instant2","_endInternal2","_end2","_beginInternal2","_begin2","_setupLogMethod2","fatal","error","warn","info","debug","trace","config","loggerPriority","messageStack","threadGroups","logger","useLogger","priority","currentPriority","useTransform","transformFields","child","overrides","childContext","level","logMethod","bind","assign","begin","complete","end","arguments_","entry","customMessage","beginMessage","maybeContext","maybeMessage","maybeAction","action","customContext","endContext","ph","result","success","err","phase","userContext","slice","maybeError","methodName","immutable","noop","NoopLogger","noopLogger","_options","_bunyamin","_debugMode","_groups","_logAddition","ThreadGroups","bunyamin","_logAddition2","add","group","id","Symbol","iterator","displayName","create","selfDebug","nobunyamin","getCached","globalThis","__BUNYAMIN__","setCached","realm","_getCached","NIL","_stacks","_threads","_countMax","_findTID","_transposeTID","_error","ThreadDispatcher","strict","min","max","_error2","_transposeTID2","_findTID2","resolve","indexOf","findIndex","count","threads","_strict","_dispatchers","_maxConcurrency","_defaultThreadName","_names","_freeThreadId","_resolveDispatcher","_resolveAlias","_resolveId","_ensureGroupDispatcher","ThreadGroupDispatcher","_ensureGroupDispatcher2","_resolveId2","_resolveAlias2","_resolveDispatcher2","IntervalTree","defaultThreadName","maxConcurrency","registerThreadGroup","_config$maxConcurrenc","insert","search","dispatcher","threadAlias","groupName","threadGroup","bunyan2trace","record","buildFallbackEvent","buildDurationBeginEvent","buildDurationEndEvent","buildInstantEvent","buildAsyncEvent","buildCompleteEvent","buildCounterEvent","buildMetadataEvent","event","moveProperties","args","extractEventWithStack","s","sf","extractTraceEvent","cname","tts","pid","time","msg","_processName","hostname","_hostname","ts","Date","getTime","source","target","keys","key","StreamEventBuilder","TEL","AbstractEventBuilder","stream","send","normalizeOptions","_options$ignoreFields","_options$defaultThrea","_options$maxConcurren","_options$strict","_options$threadGroups","ignoreFields","map","index","validateThreadGroup","_knownTids","_threadGroupDispatcher","_builder","_ignoreFields","_started","BunyanTraceEventStream","Transform","userOptions","objectMode","_transform","_encoding","callback","json","JSON","parse","field","metadata","threadName","jsonlReadFile","filePath","fs","createReadStream","encoding","pipe","StreamArray","withParser","MapValues","jsonlWriteFile","JSONLFileStream","Writable","_filePath","_fileDescriptor","Number","NaN","_offset","_counter","_construct","openSync","content","Buffer","from","write","_write","chunk","_","stringify","buffer","bytesWritten","_final","close","ArrayTreeNode","parent","_children","_map","size","findByValue","appendChild","node","RangeTreeNode","_min","POSITIVE_INFINITY","_max","NEGATIVE_INFINITY","FileNode","rank","offset","addTID","transpose","_this$offset","PIDNode","addFile","file","_this$findByValue","RootNode","addPID","PIDResolver","tree","finalize","resolvePid","resolveTid","_$file$transpose","$pid","$file","FilePIDResolver","_$file$rank","multisort","streams","multiSortStream","comparator","a","b","aa","bb","_resolver","TraceAnalyze","resolver","highWaterMark","MAX_SAFE_INTEGER","_resolverPromise","TraceMerge","resolverPromise","output","traceMerge","filePaths","makeResolver","$resolver","makeDeferred","analyze","on","reject","merge","promise","sorted","mode","Promise","_resolve","_reject","traceEventStream","jsonl","uniteTraceEvents","sourcePaths","uniteTraceEventsToFile","destinationPath","wrapLogger","maybeLogger","maybeConfig","_maybeLogger$logger"],"mappings":"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"}